<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript从入门到入坟-基础</title>
      <link href="/2019/02/28/JavaScript%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F-%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/02/28/JavaScript%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><ol><li>JavaScript 是互联网上最流行的脚本语言，这门语言可用于 web 和 Html。而且可以更加广泛的用于服务器、PC 端、移动端。</li><li>JavaScript 脚本语言：<br> JavaScript 是一种轻量级的编程语言<br> JavaScript 是可以插入 HTML 页面的编程代码<br> JavaScript 插入 HTML 页面后，可由所有的浏览器执行</li></ol><h2 id="JavaScript-实现"><a href="#JavaScript-实现" class="headerlink" title="JavaScript 实现"></a>JavaScript 实现</h2><ol><li>JavaScript 用法：<br> Html中的脚本必须位于<script></script>标签之间<br> 脚本可被放置在 Html页面的<body>和<head><meta name="generator" content="Hexo 3.8.0">部分中</head></body></li><li>JavaScript 标签：<br> 在Html 中插入JavaScript，使用<script>标签<br> 在<script></script>之间书写代码<br> 在 Html 中，不限制脚本的数量,而且通常会把脚本放置于<head><meta name="generator" content="Hexo 3.8.0">标签中，以不干扰页面内容。</head></li></ol><h2 id="JavaScript-输出"><a href="#JavaScript-输出" class="headerlink" title="JavaScript 输出"></a>JavaScript 输出</h2><p>JavaScript 的三种输出方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(&quot;Hello Javascript!&quot;);   //使用浏览器弹出提示窗口</span><br><span class="line">document.write(&quot;Hello Javascript!&quot;);    //在网页里打印字符串</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML=Date();//根据 id 获取元素并改变其中内容</span><br></pre></td></tr></table></figure></p><h2 id="JavaScript-语句"><a href="#JavaScript-语句" class="headerlink" title="JavaScript 语句"></a>JavaScript 语句</h2><ol><li>JavaScript 语句是向浏览器发出的命令，语句的作用是告诉浏览器该做什么。</li><li>分号是语句之间的分隔符号，且 JavaScript 会在每行的末尾自动添加分号。</li><li>JavaScript 的代码运行顺序是按照编写的顺序依次往下执行</li><li>JavaScript 的标识符必须由字母、下划线或者美元符号开始。</li><li><p>JavaScript 是对大小写敏感的编程语言。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&quot;demo&quot;).innerHTML=Date(); //✅</span><br><span class="line">document.GetelementById(&quot;demo&quot;).innerhtml=date(); //❌</span><br></pre></td></tr></table></figure></li><li><p>JavaScript 会省略去多余的空格。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document          .write(&quot;Hello Javascript!&quot;); //可以正确执行</span><br></pre></td></tr></table></figure><p> 但是为了代码规范与整洁性，不建议使用这样的写法。</p></li><li>JavaScript 的保留字<br> <img src="http://head.redpold.xin/15513505906272.jpg" alt=""><br> 保留字是不可以作为变量、标识符、函数名使用的单词，它们有在语言中特定的含义和作用。</li></ol><h2 id="JavaScript-注释"><a href="#JavaScript-注释" class="headerlink" title="JavaScript 注释"></a>JavaScript 注释</h2><p>注释是用来解释语句作用或者让语句不被执行的符号。</p><ol><li><p>单行注释：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//这是单行注释</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML=Date(); //这也是单行注释</span><br></pre></td></tr></table></figure><p> 单行注释可以在某行的起始位置或者在某条语句的后面，被标记的代码不会被浏览器解释。</p></li><li>多行注释 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">1.</span><br><span class="line">2.</span><br><span class="line">在其中的所有代码都不会被执行。</span><br><span class="line">4.</span><br><span class="line">5.</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><ol><li><p>字符/字符串(String)<br> 用单引号括起来的一个字符叫做字符<br> 用双引号括起来的一串字符叫做字符串</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a=&apos;a&apos;;</span><br><span class="line">var b=&quot;Hello&quot;</span><br></pre></td></tr></table></figure></li><li><p>数字(Number)<br> 数字就是我们常见的阿拉伯数字，从0–9.</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var pi = 3.1415926;  //定义了一个名为 pi 值为3.1415926的变量</span><br></pre></td></tr></table></figure></li><li><p>布尔(Boolean)<br> 布尔类型只有连个值——真/假</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var yees = true;</span><br><span class="line">var noo = false;</span><br></pre></td></tr></table></figure></li><li><p>数组(Array)<br> 数组是一个数据集合。<br> JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素。可以通过使用length属性获得数组长度。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3.14, &apos;Hello&apos;, null, true];</span><br><span class="line">arr.length; // 6</span><br></pre></td></tr></table></figure><p> 注意:直接给Array的length赋一个新的值会导致Array大小的变化：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3];</span><br><span class="line">arr.length; // 3</span><br><span class="line">arr.length = 6;</span><br><span class="line">arr; // arr变为[1, 2, 3, undefined, undefined, undefined]</span><br><span class="line">arr.length = 2;</span><br><span class="line">arr; // arr变为[1, 2]</span><br></pre></td></tr></table></figure><p> Array可以通过下标(索引)把对应的元素修改为新的值，因此，对Array的下标进行赋值会直接修改这个Array：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</span><br><span class="line">arr[1] = 99;</span><br><span class="line">arr; // arr现在变为[&apos;A&apos;, 99, &apos;C&apos;]</span><br></pre></td></tr></table></figure><p> 如果通过下标赋值时，下标超过了范围，同样会引起Array大小的变化：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3];</span><br><span class="line">arr[5] = &apos;x&apos;;</span><br><span class="line">arr; // arr变为[1, 2, 3, undefined, undefined, &apos;x&apos;]</span><br></pre></td></tr></table></figure><p> <strong>indexOf</strong><br> Array也可以通过indexOf()来搜索一个指定的元素的位置：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [10, 20, &apos;30&apos;, &apos;xyz&apos;];</span><br><span class="line">arr.indexOf(10); // 元素10的索引为0</span><br><span class="line">arr.indexOf(20); // 元素20的索引为1</span><br><span class="line">arr.indexOf(30); // 元素30没有找到，返回-1</span><br><span class="line">arr.indexOf(&apos;30&apos;); // 元素&apos;30&apos;的索引为2</span><br></pre></td></tr></table></figure></li><li><p>对象(Object)<br> JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成:key:value.<br> JavaScript的对象用于描述现实世界中的某个对象。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var car = &#123;</span><br><span class="line">    name:&quot;红旗&quot;,</span><br><span class="line">    type:&quot;520&quot;,</span><br><span class="line">    color:&quot;black&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> JavaScript用一个{…}表示一个对象，键值对以xxx: xxx形式申明，用,隔开。注意，最后一个键值对不需要在末尾加,，如果加了，有的浏览器（如低版本的IE）将报错。</p></li><li>空(Null) 与 未定义(Undefine)<br> <code>null</code> 和 <code>undefined</code> 含义模糊<br> <code>null</code>属于对象（object）的一种，意思是该对象为空；<code>undefined</code>则是一种数据类型，表示未定义。两者非常容易混淆，但是含义完全不同。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typeof null; // object</span><br><span class="line">typeof undefined; // undefined</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript 从入门到入坟 </category>
          
          <category> 开篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript从入门到入坟:开篇</title>
      <link href="/2019/01/22/JavaScript%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F-%E5%BC%80%E7%AF%87/"/>
      <url>/2019/01/22/JavaScript%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F-%E5%BC%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前端技术三座大山"><a href="#一、前端技术三座大山" class="headerlink" title="一、前端技术三座大山"></a>一、前端技术三座大山</h2><center><img src="http://head.redpold.xin/15481657864330.jpg" alt=""></center><br>众所周知，前端技术按技术点分大致可以分为三类：<br>1. &#160; &#160;Html:官方释意为超文本标记语言，标准通用标记语言下的一个应用。是网页制作必备的编程语言。其中的<code>超文本</code>指的是页面内可以包含图片、链接、多媒体文件和程序等内容。超文本标记语言的结构包括<code>头</code>部和<code>主体</code>两个部分，并且用<code>&lt;html&gt;&lt;/html&gt;</code>标签包括，以告知浏览器这是一个网页。<code>头</code>部提供关于网页的信息，<code>主体</code>提供网页的具体内容，也就是我们能实际看到的内容。<br>&#160; &#160; &#160; &#160;网页的本质就是超文本标记语言，通过结合其他的网页技术创造出功能强大的网页。那么说了这么久超文本语言到底是什么？超文本语言本质上就是文本，它需要浏览器解释渲染才能正确显示。现如今<code>HTML</code>技术已经更新换代到了<code>HTML5</code>，引进了更多新的功能，并且更新了许多特性，可以真正改变用户与网页的交互方式。<br><strong>注意</strong>：Html不是一门编程语言！！！<br><center><img src="http://head.redpold.xin/15481643397593.jpg" alt=""><img src="http://head.redpold.xin/15481643858986.jpg" alt=""><br></center><ol><li>&#160; &#160;<strong>CSS</strong>:全称<code>Cascading Style Sheets</code>译为层叠样式表，是一种用来表现 <code>HTML</code> 或者其他通用标记语言等文件的计算机语言,<code>CSS</code>不仅可以静态修饰网页,还可以配合各种脚本语言动态地对网页各元素进行格式化。CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力。<br>&#160; &#160; &#160; &#160; <code>CSS</code>提供了丰富的文档样式外观，以及设置文本和背景属性的能力；允许为任何元素创建边框，以及元素边框与其他元素间的距离，以及元素边框与元素内容间的距离；允许随意改变文本的大小写方式、修饰方式以及其他页面效果。如果说 <code>HTML</code> 的作用是如何定义了网页元素，那么<code>CSS</code>的作用就是定义了网页元素如何显示。利用它可以实现修改一个小的样式更新与之相关的所有页面元素。<br>&#160; &#160; &#160; &#160;同样，随着时代的发展<code>CSS</code>技术也已经更新到了<code>CSS3</code>，拥有了很多新特性比如：圆角效果、图形化边界、块阴影与文字阴影、使用RGBA实现透明效果、渐变效果、使用<code>@Font-Face</code>实现定制字体、多背景图、文字或图像的变形处理（旋转、缩放、倾斜、移动）、多栏布局、媒体查询等。</li><li>&#160; &#160; <strong>JavaScript</strong>（以下篇幅简称为 JS ）是一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为<code>JS</code>引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在<code>HTML</code>（标准通用标记语言下的一个应用）网页上使用，用来给<code>HTML</code>网页增加动态功能。<code>JS</code>广泛用于<code>Web</code>应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常<code>JS</code>脚本是通过嵌入在<code>HTML</code>中来实现自身的功能的。那么我们接下来要学习的就是这一门直译式脚本语言。</li></ol><hr><center><img src="http://head.redpold.xin/15481666043948.jpg" alt=""><br></center><h2 id="二、JS的利与弊"><a href="#二、JS的利与弊" class="headerlink" title="二、JS的利与弊"></a>二、JS的利与弊</h2><p>&#160; &#160; &#160; &#160;JS是世界上最流行的脚本语言，因为你在电脑、手机、平板上浏览的所有的网页，以及无数基于HTML5的手机App，交互逻辑都是由JavaScript驱动的。<br>简单地说，JS是一种运行在浏览器中的解释型的编程语言。</p><h3 id="1-弊"><a href="#1-弊" class="headerlink" title="1.弊"></a><strong>1.弊</strong></h3><blockquote><p>如果你有一个问题，你选择用 js 来解决。。。<br>那么好！<br>你现在有两个问题了！</p></blockquote><p>&#160; &#160; &#160; &#160; 为什么会有这样的调侃呢？让我们先回到 JS 诞生的时候。1995年一位名叫’Brendan Eich’的程序员被网景公司指定为一种未来的网页脚本语言的设计师，而且要让这种语言看起来与大名鼎鼎的<code>Java</code>语言足够相似。但是这位程序员对<code>Java</code>一点兴趣也没有，为了应付公司安排的任务，他只用了10天时间，就把<code>JavaScript</code>设计出来了。但是设计的时间太短太伧俗，语言的一些细节考虑的不够严谨，导致后来的很长一段时间使用<code>JavaScript</code>写出来的程序混乱不堪。但是这门语言刚向市场推出就被广泛接受，一时间被全世界的用户大量使用，这样的爆炸式增长使得调整语言规范变得更加困难。在其推出的一年半之后，国际标准就问世了，在设计缺陷还没有充分暴露的情况下就成了标准，这是一件非常难以想象的。要知道 C 语言问世将近20年之后才颁布了国际标准。<br><strong>以下列举几个 JavaScript 的设计缺陷和奇葩的地方</strong><br><strong>缺陷：</strong></p><ol><li>不适合开发大型程序<br> 因为<code>JavaScript</code>没有<code>namespace</code>或者是<code>package</code>的设计，使得程序很难模块化；没有如何将代码分布在多个文件的规范；允许同名函数的重复定义，后面的定义可以覆盖前面的定义，很不利于模块化加载。</li><li>标准库非常小<br> <code>Javascript</code>提供的标准函数库非常小，只能完成一些基本操作，很多功能都不具备。</li><li><p><code>null</code> 和 <code>undefined</code> 含义模糊<br> <code>null</code>属于对象（object）的一种，意思是该对象为空；<code>undefined</code>则是一种数据类型，表示未定义。两者非常容易混淆，但是含义完全不同。在编程实践中，null几乎没用，根本不应该设计它。</p><blockquote><p>  typeof null; // object<br>  typeof undefined; // undefined</p></blockquote></li><li><p>全局变量难以控制<br> Javascript的全局变量，在所有模块中都是可见的；任何一个函数内部都可以生成全局变量，这大大加剧了程序的复杂性。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = 1;</span><br><span class="line">　　(function()&#123;</span><br><span class="line">　　　　b=2; </span><br><span class="line">　　　　alert(a);</span><br><span class="line">　　&#125;)(); 输出 1</span><br><span class="line">　　alert(b); 输出 2</span><br></pre></td></tr></table></figure></li><li><p>自动插入的行尾分号<br> Javascript的所有语句，都必须以分号结尾。但是，如果你忘记加分号，解释器并不报错，而是为你自动加上分号。有时候，这会导致一些难以发现的错误。<br> 比如，下面这个函数根本无法达到预期的结果，返回值不是一个对象，而是undefined。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function()&#123;</span><br><span class="line">　　　　return</span><br><span class="line">　　　　　　&#123;</span><br><span class="line">　　　　　　　　i=1</span><br><span class="line">　　　　　　&#125;;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p> 究其原因就是因为解释器自动在return语句后面加上了分号。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function()&#123;</span><br><span class="line">　　　　return;</span><br><span class="line">　　　　　　&#123;</span><br><span class="line">　　　　　　　　i=1</span><br><span class="line">　　　　　　&#125;;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></li><li><p>加号运算符<br> +号作为运算符，有两个含义，可以表示数字与数字的和，也可以表示字符与字符的连接。</p></li><li><p>NaN<br> NaN是一种数字，表示超出了解释器的极限。<br> 它有一些很奇怪的特性：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NaN === NaN; //false</span><br><span class="line">NaN !== NaN; //true</span><br><span class="line">alert( 1 + NaN ); // NaN</span><br></pre></td></tr></table></figure><p> 与其设计NaN，不如解释器直接报错，反而有利于简化程序。</p></li><li><p>数组和对象<br> 由于Javascript的数组也属于对象（object），所以要区分一个对象到底是不是数组，相当麻烦。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ( arr &amp;&amp; typeof arr === &apos;object&apos; &amp;&amp;typeof arr.length === &apos;number&apos; &amp;&amp;!arr.propertyIsEnumerable(&apos;length&apos;))&#123;</span><br><span class="line">　　　　alert(&quot;arr is an array&quot;);</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></li><li><p>== 和 ===<br> ==用来判断两个值是否相等。当两个值类型不同时，会发生自动转换，得到的结果非常不符合直觉。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot; == &quot;0&quot; // false</span><br><span class="line">0 == &quot;&quot; // true</span><br><span class="line">0 == &quot;0&quot; // true</span><br><span class="line">false == &quot;false&quot; // false</span><br><span class="line">false == &quot;0&quot; // true</span><br><span class="line">false == undefined // false</span><br><span class="line">false == null // false</span><br><span class="line">null == undefined // true</span><br><span class="line">&quot; \t\r\n&quot; == 0 // true</span><br></pre></td></tr></table></figure></li><li><p>基本类型的包装对象<br> Javascript有三种基本数据类型：字符串、数字和布尔值。它们都有相应的建构函数，可以生成字符串对象、数字对象和布尔值对象。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Boolean(false);</span><br><span class="line">new Number(1234);</span><br><span class="line">new String(&quot;Hello World&quot;);</span><br></pre></td></tr></table></figure><p> 与基本数据类型对应的对象类型，作用很小，造成的混淆却很大。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert( typeof 1234); // number</span><br><span class="line">alert( typeof new Number(1234)); // object</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-利"><a href="#2-利" class="headerlink" title="2.利"></a><strong>2.利</strong></h3><p>&#160; &#160; &#160; &#160;先来看看<code>Atwood&#39;s Law</code>:Atwood定律是<code>Jeff Atwood</code>在2007年提出的：<code>“any application that can be written in JavaScript, will eventually be written in JavaScript.”</code>即:</p><blockquote><p>任何可以使用JavaScript来编写的应用，最终会由JavaScript编写。</p></blockquote><p>&#160; &#160; &#160; &#160;快速的终端反应： Java 脚本为客户端编写，不需要服务器端支持就可运行。也不需要在客户端被编译提高速度优势。在用户电脑上作为脚本执行，依靠任务，结果几乎是立即完成的。例如，在发送到服务器之前，你可以校验任何客户的输入内容。 这样可以减少服务器上载的内容。</p><p>&#160; &#160; &#160; &#160;简洁性： JavaScript很容易学习和实现。它利用DOM模型， 提供大量的预编制的功能性对象代码，使得开发一个满足用户需要的脚本变得轻而易举。</p><p>&#160; &#160; &#160; &#160;用途广泛： JavaScript和其他语言可以很好的交互，并且广泛应用于各个领域。现在，有很多的方法可以通过Node.js服务器使用JavaScript。如果你曾经使用node.js的Express框架bootstrap，使用一个文档数据库如mongodb，并且在客户前端使用JavaScript，那么完全可以只使用JavaScript开发一个从前端到后端的app应用。</p><p>&#160; &#160; &#160; &#160;而且随着计算机技术和网络技术的快速发展，计算能力和网速不再是制约前端技术的障碍，许多许多的软件都渐渐被前端化，轻量化，在保持了原有的功能基础上使其传播效率大大增加，这也是直译式脚本语言的优势之一。</p><hr><p>Update：2019/01/23 22:31<br>事情太多，还没完成</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript 从入门到入坟 </category>
          
          <category> 开篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基础语法</title>
      <link href="/2019/01/22/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/01/22/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown ???"></a>MarkDown ???</h1><p>&#160; &#160; &#160; &#160;Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>&#160; &#160; &#160; &#160;Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。<br>&#160; &#160; &#160; &#160;我们在 Github 上浏览项目的时里面的 Readme.md就是使用的 Markdown 语法。而且 Markdown 语法简单易学，五分钟就能搞定，并且支持在其中添加<code>html</code>标签例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;b&gt;这是一个段落&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;p&gt;&lt;b&gt;这是一个段落&lt;/b&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>渲染效果：</p><blockquote><p><b>这是一个段落</b></p><br><br><br><p><b>这是一个段落</b></p></blockquote><h1 id="MarkDown-语法"><a href="#MarkDown-语法" class="headerlink" title="MarkDown 语法"></a>MarkDown 语法</h1><ol><li><p><strong>标题</strong><br> 标题用#来标注<br> 一个#是一级标题，两个#是二级标题，依次类推</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#一级标题</span><br><span class="line">##二级标题</span><br><span class="line">###三级标题</span><br><span class="line">####四级标题</span><br><span class="line">#####五级标题</span><br><span class="line">######六级标题</span><br></pre></td></tr></table></figure><p> 效果如下：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote></li><li><p><strong>字体</strong><br> 加粗<br> 要加粗的文字左右分别用两个*号包起来</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**加粗**</span><br></pre></td></tr></table></figure><blockquote><p><strong>加粗</strong></p></blockquote><p> 斜体<br> 要倾斜的文字左右分别用一个*号包起来</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br></pre></td></tr></table></figure><blockquote><p><em>斜体</em></p></blockquote><p> 斜体加粗<br> 要倾斜和加粗的文字左右分别用三个*号包起来</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***斜体加粗***</span><br></pre></td></tr></table></figure><blockquote><p><strong><em>斜体加粗</em></strong></p></blockquote><p> 删除线<br> 要加删除线的文字左右分别用两个~~号包起来</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><blockquote><p><del>删除线</del></p></blockquote></li><li><p><strong>引用</strong><br> 在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;引用1</span><br><span class="line">&gt;&gt;引用2</span><br><span class="line">&gt;&gt;&gt;引用3</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;引用n</span><br></pre></td></tr></table></figure><p> 效果如下：</p><blockquote><p>引用1</p><blockquote><p>引用2</p><blockquote><p>引用3</p><blockquote><blockquote><blockquote><p>引用n</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></li><li><p><strong>分割线</strong><br> 三个或者三个以上的 - 或者 * 都可以：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">****</span><br></pre></td></tr></table></figure><p> 效果都是一样的：</p><blockquote><hr><hr><hr><hr></blockquote></li><li><p><strong>图片</strong><br> 语法：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)</span><br><span class="line">#图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">#图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![giao辞](http://head.redpold.xin/15480891252911.jpg)</span><br><span class="line"># ps:本博客放大图片时才显示图片alt</span><br></pre></td></tr></table></figure><p> 效果：</p><blockquote><p><img src="http://head.redpold.xin/15480891252911.jpg" alt="giao辞"></p></blockquote></li><li><p><strong>超链接</strong><br> 语法：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">#title可加可不加</span><br></pre></td></tr></table></figure><p> 示例：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[佚先生的 Blog](https://redpold.github.io/)</span><br><span class="line">[Bing](http://www.bing.com/)</span><br></pre></td></tr></table></figure><p> 效果如下：</p><blockquote><p><a href="https://redpold.github.io/" target="_blank" rel="noopener">佚先生的 Blog</a><br><a href="http://www.bing.com/" target="_blank" rel="noopener">Bing</a></p></blockquote><hr><p> PS:文档中的链接默认在浏览器新标签中打开，之前提到过Markdown 还支持在文档中插入 <code>Html</code> 标签，如果我们不想在新标签中打开链接可使用以下方法：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;</span><br></pre></td></tr></table></figure><p> 示例：</p><blockquote><p><a href="https://redpold.github.io/" target="_blank">佚先生的 Blog</a></p></blockquote></li><li><p><strong>列表</strong><br> Markdown中列表分为有序列表和无序列表两种：<br> 无序列表：<br> 无序列表用 <code>- + *</code> 任何一种都可以</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><p> 效果如下：</p><blockquote><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul></blockquote><hr><p> 有序列表：<br> 有序列表就是数字加点：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"># 序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><p> 效果如下：</p><blockquote><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol></blockquote><p> 列表嵌套：<br> 上一级和下一级之间敲三个空格即可，有序列表无序列表嵌套方法相同：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 标题一</span><br><span class="line">    1. 嵌套一</span><br><span class="line">    2. 嵌套二</span><br><span class="line">    3. 嵌套三</span><br><span class="line">2. 标题二</span><br><span class="line">    1. 嵌套一</span><br><span class="line">    2. 嵌套二</span><br><span class="line">    3. 嵌套三</span><br></pre></td></tr></table></figure><blockquote><pre><code>1. 标题一    1. 嵌套一    2. 嵌套二    3. 嵌套三2. 标题二    1. 嵌套一    2. 嵌套二    3. 嵌套三</code></pre></blockquote></li><li><p><strong>代码</strong><br> 语法：<br> 单行代码：代码之间分别用一个反引号包起来:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure><p> 示例：</p><blockquote><p><code>代码内容</code></p></blockquote><p> 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(```)</span><br><span class="line">代码...</span><br><span class="line">代码...</span><br><span class="line">代码...</span><br><span class="line">(```)</span><br><span class="line"># 注意：实际使用中没有括号！！！</span><br></pre></td></tr></table></figure><p> 示例：</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void mian(Stirng[] args)&#123;</span><br><span class="line">    System.out.println(&quot;别的不会了&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><ol start="9"><li><p><strong>表格</strong><br> 语法：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">|表头|表头|表头|</span><br><span class="line">|---|---|---|</span><br><span class="line">|内容|内容|内容|</span><br><span class="line">|内容|内容|内容|</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。</span><br></pre></td></tr></table></figure><p> 示例：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 姓名 | 技能 | 备注 |</span><br><span class="line">| --- | --- | --- |</span><br><span class="line">| 六小龄童 | 章口就莱 | 中美合拍 |</span><br></pre></td></tr></table></figure><p> 效果如下：</p><blockquote><p>| 姓名 | 技能 | 备注 |<br>| — | — | — |<br>| 六小0童 | 章口就莱 战术后仰 | 中美合拍 六学创始人 |</p></blockquote></li></ol><hr><p>Written:2019/01/22 1:20</p>]]></content>
      
      
      <categories>
          
          <category> 博客由来 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-github搭建博客</title>
      <link href="/2019/01/21/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/01/21/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Github-搭建博客"><a href="#Hexo-Github-搭建博客" class="headerlink" title="Hexo+Github 搭建博客"></a>Hexo+Github 搭建博客</h1><p>准备工作：<br><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网</a>环境<br><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo官网</a><br><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>工具<br><a href="https://github.com/" target="_blank" rel="noopener">Github</a>账号<br><a href="https://coding.net/help/doc/project/markdown.html" target="_blank" rel="noopener">Markdown语法简介</a></p><h3 id="Node-js-是什么？"><a href="#Node-js-是什么？" class="headerlink" title="Node.js 是什么？"></a><strong>Node.js 是什么？</strong></h3><p><center><br><img src="http://head.redpold.xin/15480838376941.jpg" alt="Node.js"><br></center><br>&#160; &#160; &#160; &#160;简单的说 Node.js 就是运行在服务端的 JavaScript。是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。Node公开宣称的目标是 “旨在提供一种简单的构建可伸缩网络程序的方法”。<br>&#160; &#160; &#160; &#160;如果你是一个前端程序员，你不懂得像PHP、Python或Ruby等动态编程语言，然后你想创建自己的服务，那么Node.js是一个非常好的选择。</p><h3 id="NVM-是什么？"><a href="#NVM-是什么？" class="headerlink" title="NVM 是什么？"></a><strong>NVM 是什么？</strong></h3><p><center><br><img src="http://head.redpold.xin/15480858575101.jpg" alt="NVM"><br></center><br>&#160; &#160; &#160; &#160;NVM，即Node Version Manager 是一个开源的Node.js版本管理Bash工具，可方便的在Bash环境下下载、更新、管理多个版本并存的Node.js，并选择性地使用其中一个</p><h3 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a><strong>Hexo 是什么？</strong></h3><p><center><br><img src="http://head.redpold.xin/15480841345013.jpg" alt="Hexo"><br></center><br>&#160; &#160; &#160; &#160;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="Git-与-Github"><a href="#Git-与-Github" class="headerlink" title="Git 与 Github"></a><strong>Git 与 Github</strong></h3><p><center><br><img src="http://head.redpold.xin/15480846549534.jpg" alt="GitHub"><br></center><br>&#160; &#160; &#160; &#160;Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 [1]  Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>&#160; &#160; &#160; &#160;而GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。GitHub还是一个开源协作社区，通过GitHub，既可以让别人参与你的开源项目，也可以参与别人的开源项目。<br>&#160; &#160; &#160; &#160;GitHub于2008年4月10日正式上线，除了git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、jQuery、python 等。</p><hr><h3 id="一-环境配置"><a href="#一-环境配置" class="headerlink" title="一.环境配置"></a><strong>一.环境配置</strong></h3><p><strong>安装Node.js环境与Git 工具</strong><br>安装 Node.js的最好方法是使用<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>,在终端中粘贴安装最新版本 nvm 的代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure></p><p>然后使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm -v</span><br></pre></td></tr></table></figure></p><p>测试是否安装成功</p><p><strong>安装 Node.js</strong><br>如果 nvm 安装成功可使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install node</span><br></pre></td></tr></table></figure><p>也可以使用下面的命令格式安装官网最新版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install node.js版本号</span><br></pre></td></tr></table></figure></p><p>macOS如果安装了 xcode 会默认安装 Git 命令行工具，或者安装<code>Xcode command line tools</code><br>如果都没有安装直接去<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>官网下载对应系统安装包安装即可  </p><p><strong>安装 Hexo</strong><br>使用npm命令安装 Hexo 其中<code>-g</code>表示全局安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p><p>为了便于将博客发布到 GitHub 上同时要安装<code>hexo-deployer-git</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p><strong>准备 Github 环境</strong><br>这部分需要准备 Github 仓库和本机 ssh 公钥<br>首先在 Github 中新建一个仓库，在<code>Repository name</code>处填写:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yourGithubAccount.github.io</span><br></pre></td></tr></table></figure></p><p><img src="http://head.redpold.xin/15480853345524.jpg" alt=""></p><p>其中<code>yourGithubAccount</code>就是你的用户名<br>然后生成自己的 ssh 公钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C “your_Email@example.com” </span><br><span class="line"># 按照提供的 Email 生成 ssh公钥</span><br><span class="line">$ cat ~/.ssh/id_rsa.pub    </span><br><span class="line"># 打开生成的公钥</span><br></pre></td></tr></table></figure></p><p>将打开的公钥内容添加到<code>Github----Account Settings----SSH and GPG keys</code>中<br><img src="http://head.redpold.xin/15480854601565.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line"># 测试是否配置成功</span><br></pre></td></tr></table></figure><p><img src="http://head.redpold.xin/15480859836144.jpg" alt="成功配置"></p><p><strong>完善用户信息</strong><br>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;username&quot;----Github用户名</span><br><span class="line">$ git config --global user.email &quot;your_email@example.com&quot;----填写自己的邮箱</span><br></pre></td></tr></table></figure></p><hr><h3 id="二-Hexo-初始化配置"><a href="#二-Hexo-初始化配置" class="headerlink" title="二.Hexo 初始化配置"></a><strong>二.Hexo 初始化配置</strong></h3><p><strong>创建 Hexo 文件夹</strong><br>根据喜好自己建立文件夹用于 Hexo 的初始化与部署，使用<code>cd</code>进入文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br><span class="line"># 初始化 hexo 下载必要文件</span><br><span class="line">$ npm install</span><br><span class="line"># 安装依赖</span><br></pre></td></tr></table></figure></p><p>本地查看效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line"># ---hexo generate 渲染静态页面</span><br><span class="line">$ hexo s</span><br><span class="line"># ---hexo server 启动本地服务器</span><br></pre></td></tr></table></figure></p><p><img src="http://head.redpold.xin/15480860528429.jpg" alt="启动本地预览"><br>根据提示在浏览器中打开<code>localhost:4000</code>即可预览本地效果，<code>Ctrl+C</code>停止预览<br><img src="http://head.redpold.xin/15480851767957.jpg" alt="本地效果"></p><hr><h3 id="三-部署-Hexo-到-Github"><a href="#三-部署-Hexo-到-Github" class="headerlink" title="三.部署 Hexo 到 Github"></a><strong>三.部署 Hexo 到 Github</strong></h3><p>找到 Hexo 文件夹下的<code>_config.yml</code>文件，修改其中<code>deploy</code>参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: “名为 yourGithubAccount.github.io仓库的 ssh 链接”</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>修改完成后在此目录中打开终端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br><span class="line"># 先生成静态文件资源然后部署到配置的 Github 仓库中</span><br></pre></td></tr></table></figure></p><hr><p>Update:2019/1/21 01:11<br>图床尚未就绪，等待更新<br>Update:2019/1/21 23:34<br>图床就绪，更新必要图片</p>]]></content>
      
      
      <categories>
          
          <category> 博客由来 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS Opencv4.0.1+xcode10.1 安装并配置</title>
      <link href="/2019/01/20/macOS-Opencv/"/>
      <url>/2019/01/20/macOS-Opencv/</url>
      
        <content type="html"><![CDATA[<h1 id="macOS-Opencv4-0-1-xcode10-1-安装并配置"><a href="#macOS-Opencv4-0-1-xcode10-1-安装并配置" class="headerlink" title="macOS Opencv4.0.1+xcode10.1 安装并配置"></a>macOS Opencv4.0.1+xcode10.1 安装并配置</h1><h3 id="1-安装-OpenCV"><a href="#1-安装-OpenCV" class="headerlink" title="1.安装 OpenCV"></a>1.安装 OpenCV</h3><p>使用命令:</p><blockquote><p><code>brew install opencv</code><br><code>brew install cmake</code></p></blockquote><p>安装 opencv 与 cmake</p><h3 id="2-配置-Xcode-项目"><a href="#2-配置-Xcode-项目" class="headerlink" title="2.配置 Xcode 项目"></a>2.配置 Xcode 项目</h3><p>新建一个Command Line Tools 项目并选择语言为 C++<br>进入项目配置 -Build Setting-中的：  </p><ol><li><code>Header Search Paths</code>——<code>/usr/local/include/opencv4/</code></li><li><code>Library Search Phts</code>——<code>/usr/local/lib</code><br><img src="http://head.redpold.xin/15480862797072.jpg" alt=""></li></ol><p>进入<code>General</code>–<code>Linked Frameworks and Libraries</code><br>点击左下角的+号选择 other 并导航到 OpenCV 的主目录<br>Finder使用 <code>command+shift+G</code>前往<code>/usr/local/Cellar/Opencv/4.0.1/lib</code><br>将所有以.dylib 的文件选中并且导入<br><img src="http://head.redpold.xin/15480863055144.jpg" alt=""></p><h3 id="3-测试环境"><a href="#3-测试环境" class="headerlink" title="3.测试环境"></a>3.测试环境</h3><p>在 main.cpp中编写如下代码即可测试环境是否可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;opencv2/opencv.hpp&gt;</span><br><span class="line">using namespace cv;</span><br><span class="line">int main(int argc, char** argv) &#123;</span><br><span class="line">    Mat image;</span><br><span class="line">    image = imread(&quot;/Users/test/Pictures/1.JPG&quot;, 1);</span><br><span class="line">    namedWindow(&quot;Display Image&quot;, WINDOW_AUTOSIZE);</span><br><span class="line">    imshow(&quot;Display Image&quot;, image);</span><br><span class="line">    </span><br><span class="line">    Mat gray;</span><br><span class="line">    cvtColor(image, gray, COLOR_RGBA2GRAY);</span><br><span class="line">    namedWindow(&quot;gray&quot;);</span><br><span class="line">    imshow(&quot;gray&quot;, gray);</span><br><span class="line">    </span><br><span class="line">    waitKey(0);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Update:2019/1/21 23:34<br>更新内容图片</p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Opencv </tag>
            
            <tag> macOS </tag>
            
            <tag> xcode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>大家好，我是佚先生。欢迎来到我的个人瞎扯淡博客。</p><p>我会在这里分享一些在学习或工作中的内容，留下一些痕迹。</p>]]></content>
      
    </entry>
    
    
  
</search>
